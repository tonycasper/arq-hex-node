"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_1 = require("./openapi");
const PLUGIN_ID = "openapi";
const DEFAULT_FOLDER = "openapi";
const COLLECTION_NAMESPACE = "collection";
const COLLECTION_OPTIONS = [
    {
        description: "Name for the collection created from OpenAPI definitions",
        name: "id",
        type: "string",
        nullable: true,
        default: "openapi",
    },
    {
        description: "Name of the collection to extend from",
        name: "from",
        type: "string"
    },
];
function getRoutesCollection(routes, collectionOptions) {
    if (!collectionOptions) {
        return null;
    }
    return routes.reduce((collection, route) => {
        if (route.variants && route.variants.length) {
            collection.routes.push(`${route.id}:${route.variants[0].id}`);
        }
        return collection;
    }, { id: collectionOptions.id, from: collectionOptions.from || null, routes: [] });
}
class Plugin {
    constructor({ logger, alerts, mock, files, config }) {
        Object.defineProperty(this, "_config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_files", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_loadRoutes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_loadCollections", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_documentsAlerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_collectionIdOption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_collectionFromOption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._config = config;
        this._logger = logger;
        this._alerts = alerts;
        this._files = files;
        const configCollection = this._config.addNamespace(COLLECTION_NAMESPACE);
        [this._collectionIdOption, this._collectionFromOption] = configCollection.addOptions(COLLECTION_OPTIONS);
        this._documentsAlerts = this._alerts.collection("documents");
        const { loadRoutes, loadCollections } = mock.createLoaders();
        this._loadRoutes = loadRoutes;
        this._loadCollections = loadCollections;
        this._files.createLoader({
            id: PLUGIN_ID,
            src: `${DEFAULT_FOLDER}/**/*`,
            onLoad: this._onLoadFiles.bind(this),
        });
    }
    static get id() {
        return PLUGIN_ID;
    }
    _getRoutesAndCollectionsFromFilesContents(filesContents) {
        return __awaiter(this, void 0, void 0, function* () {
            const openApiRoutesAndCollections = yield Promise.all(filesContents.map((fileDetails) => {
                const fileContent = fileDetails.content;
                return fileContent.map((openAPIDefinition) => {
                    this._logger.debug(`Creating routes from openApi definition: '${JSON.stringify(openAPIDefinition)}'`);
                    return (0, openapi_1.openApiRoutes)(openAPIDefinition, {
                        defaultLocation: fileDetails.path,
                        logger: this._logger,
                        alerts: this._documentsAlerts
                    }).then((routes) => {
                        return {
                            routes,
                            collection: getRoutesCollection(routes, openAPIDefinition.collection)
                        };
                    });
                });
            }).flat());
            return openApiRoutesAndCollections.reduce((allRoutesAndCollections, definitionRoutesAndCollections) => {
                allRoutesAndCollections.routes = allRoutesAndCollections.routes.concat(definitionRoutesAndCollections.routes);
                if (definitionRoutesAndCollections.collection) {
                    allRoutesAndCollections.collections = allRoutesAndCollections.collections.concat(definitionRoutesAndCollections.collection);
                }
                return allRoutesAndCollections;
            }, { routes: [], collections: [] });
        });
    }
    get _defaultCollectionOptions() {
        if (!this._collectionIdOption.value) {
            return null;
        }
        const options = {
            id: this._collectionIdOption.value,
        };
        if (this._collectionFromOption.value) {
            options.from = this._collectionFromOption.value;
        }
        return options;
    }
    _onLoadFiles(filesContents) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filesContents.length) {
                let collectionsToLoad;
                this._documentsAlerts.clean();
                const { routes, collections } = yield this._getRoutesAndCollectionsFromFilesContents(filesContents);
                const folderTrace = `from OpenAPI definitions found in folder '${this._files.path}/${DEFAULT_FOLDER}'`;
                this._logger.debug(`Routes to load from openApi definitions: '${JSON.stringify(routes)}'`);
                this._logger.verbose(`Loading ${routes.length} routes ${folderTrace}`);
                this._loadRoutes(routes);
                this._logger.debug(`Collections created from OpenAPI definitions: '${JSON.stringify(collections)}'`);
                if (this._defaultCollectionOptions) {
                    const defaultCollection = getRoutesCollection(routes, this._defaultCollectionOptions);
                    this._logger.debug(`Collection created from all OpenAPI definitions: '${JSON.stringify(defaultCollection)}'`);
                    collectionsToLoad = collections.concat([defaultCollection]);
                }
                else {
                    collectionsToLoad = collections;
                }
                this._logger.verbose(`Loading ${collectionsToLoad.length} collections ${folderTrace}`);
                this._loadCollections(collectionsToLoad);
            }
        });
    }
}
exports.default = Plugin;
