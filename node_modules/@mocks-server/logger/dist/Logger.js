"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const winston_1 = __importDefault(require("winston"));
const winston_array_transport_1 = __importDefault(require("winston-array-transport"));
const chalk_1 = __importDefault(require("chalk"));
const events_2 = require("./events");
const DEFAULT_STORE_LIMIT = 1000;
const TIME_FORMAT = "HH:mm:ss:SS";
const LEVEL_SILLY = "silly";
const LEVEL_DEBUG = "debug";
const LEVEL_VERBOSE = "verbose";
const LEVEL_INFO = "info";
const LEVEL_WARN = "warn";
const LEVEL_ERROR = "error";
const LEVEL_SILENT = "silent";
const TRANSPORT_CONSOLE = "console";
const TRANSPORT_STORE = "store";
const TRANSPORT_GLOBAL_STORE = "globalStore";
const formatTimestamp = winston_1.default.format.timestamp({
    format: TIME_FORMAT,
});
function colourLabel(label) {
    if (!label.length) {
        return "";
    }
    return chalk_1.default.grey(label);
}
function formatLabelOrLevel(labelOrLevel) {
    if (!labelOrLevel.length) {
        return "";
    }
    return `[${labelOrLevel}]`;
}
function logTemplate(log, colors = false) {
    const label = colors ? colourLabel(log.label) : log.label;
    return `${log.timestamp} ${formatLabelOrLevel(log.level)}${formatLabelOrLevel(label)} ${log.message}`;
}
function colorsTemplate(log) {
    return logTemplate(log, true);
}
function template(log) {
    return logTemplate(log);
}
const formatLog = winston_1.default.format.printf(colorsTemplate);
const formatStore = winston_1.default.format.printf(template);
function createArrayTransport(store, defaultLevel, storeLimit) {
    return new winston_array_transport_1.default({
        array: store,
        limit: storeLimit,
        level: defaultLevel,
        maxListeners: 0,
        format: winston_1.default.format.combine(formatTimestamp, formatStore),
    });
}
function createConsoleTransport(defaultLevel) {
    return new winston_1.default.transports.Console({
        level: defaultLevel,
        format: winston_1.default.format.combine(winston_1.default.format.colorize(), formatTimestamp, formatLog),
    });
}
function createTransports(store, defaultLevel, storeLimit, globalStoreTransport) {
    return {
        [TRANSPORT_CONSOLE]: createConsoleTransport(defaultLevel),
        [TRANSPORT_STORE]: createArrayTransport(store, defaultLevel, storeLimit),
        [TRANSPORT_GLOBAL_STORE]: globalStoreTransport,
    };
}
function namespaceLabel(parentLogger, label) {
    const parentLabel = parentLogger.label;
    if (!parentLabel.length) {
        return label;
    }
    return `${parentLogger.label}:${label}`;
}
class Logger {
    /**
     * Creates a root logger
     * @returns Returns a new Logger instance
    */
    constructor(label = "", { level, storeLimit = DEFAULT_STORE_LIMIT, globalStoreLimit = DEFAULT_STORE_LIMIT } = {}, { parent, root, globalStore, globalStoreTransport } = {}) {
        Object.defineProperty(this, "_label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_transports", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_container", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_storeEmitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new events_1.default()
        });
        Object.defineProperty(this, "_globalStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_globalStoreEmitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new events_1.default()
        });
        Object.defineProperty(this, "_namespaces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_transportsPinnedLevels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { [TRANSPORT_CONSOLE]: false, [TRANSPORT_STORE]: false }
        });
        Object.defineProperty(this, "_pinnedLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_globalStoreTransport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._parent = parent;
        this._root = root || this;
        const parentLevel = this._parent && this._parent.level;
        const defaultLevel = level || parentLevel || LEVEL_INFO;
        this._level = defaultLevel;
        this._label = parent ? namespaceLabel(parent, label) : label;
        this._store = (0, events_2.observableStore)(this._storeEmitter, storeLimit);
        this._globalStore = globalStore || (0, events_2.observableStore)(this._globalStoreEmitter, globalStoreLimit);
        this._globalStoreTransport = globalStoreTransport || createArrayTransport(this._globalStore, defaultLevel, globalStoreLimit);
        this._transports = createTransports(this._store, defaultLevel, storeLimit, this._globalStoreTransport);
        this._container = new winston_1.default.Container();
        this._container.add(label, {
            format: winston_1.default.format.combine(winston_1.default.format.label({ label: this._label })),
            transports: [this._transports[TRANSPORT_CONSOLE], this._transports[TRANSPORT_STORE], this._transports[TRANSPORT_GLOBAL_STORE]]
        });
        this._logger = this._container.get(label);
    }
    _setWinstonTransportLevel(level, transport) {
        if (level === LEVEL_SILENT) {
            this._transports[transport].silent = true;
        }
        else {
            this._transports[transport].silent = false;
            this._transports[transport].level = level;
        }
    }
    _setTransportLevel(level, transport, { pinned = false, fromBaseLevel = false, forcePropagation = false }) {
        if (forcePropagation || !fromBaseLevel || (fromBaseLevel && !this._transportsPinnedLevels[transport])) {
            this._transportsPinnedLevels[transport] = pinned;
            this._setWinstonTransportLevel(level, transport);
            if (transport === TRANSPORT_STORE && !this._parent) {
                this._setWinstonTransportLevel(level, TRANSPORT_GLOBAL_STORE);
            }
        }
    }
    _setBaseLevel(level, { pinned = false, forcePropagation }) {
        this._level = level;
        this._pinnedLevel = pinned;
        this._setTransportLevel(level, TRANSPORT_CONSOLE, { fromBaseLevel: true, forcePropagation });
        this._setTransportLevel(level, TRANSPORT_STORE, { fromBaseLevel: true, forcePropagation });
    }
    _setLevelFromParent(level, { transport, forcePropagation = false }) {
        if (!this._pinnedLevel || forcePropagation) {
            this._set(level, { transport, forcePropagation });
        }
    }
    _set(level, { transport, propagate = true, forcePropagation, pinned } = {}) {
        if (transport) {
            this._setTransportLevel(level, transport, { pinned, forcePropagation });
        }
        else {
            this._setBaseLevel(level, { pinned, forcePropagation });
        }
        if (propagate) {
            this._namespaces.forEach((namespace) => {
                namespace._setLevelFromParent(level, { transport, forcePropagation });
            });
        }
    }
    _getNamespace(label) {
        return this._namespaces.find((namespace) => {
            return namespace.label === label;
        });
    }
    _createNamespace(label, options) {
        const namespace = new Logger(label, options, { parent: this, root: this._root, globalStoreTransport: this._globalStoreTransport, globalStore: this._globalStore });
        this._namespaces.push(namespace);
        return namespace;
    }
    get store() {
        return this._store;
    }
    get globalStore() {
        return this._globalStore;
    }
    get label() {
        return this._label;
    }
    get level() {
        return this._level;
    }
    [LEVEL_SILLY](log) {
        this._logger[LEVEL_SILLY](log);
    }
    [LEVEL_DEBUG](log) {
        this._logger[LEVEL_DEBUG](log);
    }
    [LEVEL_VERBOSE](log) {
        this._logger[LEVEL_VERBOSE](log);
    }
    [LEVEL_INFO](log) {
        this._logger[LEVEL_INFO](log);
    }
    [LEVEL_WARN](log) {
        this._logger[LEVEL_WARN](log);
    }
    [LEVEL_ERROR](log) {
        this._logger[LEVEL_ERROR](log);
    }
    setLevel(level, options) {
        this._set(level, options);
    }
    namespace(label, options) {
        return this._getNamespace(label) || this._createNamespace(label, options);
    }
    cleanStore() {
        this._store.splice(0, this._store.length);
    }
    onChangeStore(listener) {
        return (0, events_2.addEventListener)(listener, events_2.CHANGE_EVENT, this._storeEmitter);
    }
    onChangeGlobalStore(listener) {
        return (0, events_2.addEventListener)(listener, events_2.CHANGE_EVENT, this._globalStoreEmitter);
    }
    get root() {
        return this._root;
    }
}
exports.default = Logger;
