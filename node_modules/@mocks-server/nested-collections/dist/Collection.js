"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const events_2 = require("./events");
function elementIdIsEqualTo(element, id) {
    return element.id === id;
}
function ElementIdIsEqualToId(id) {
    return function (element) {
        return elementIdIsEqualTo(element, id);
    };
}
function findById(elements, id) {
    return elements.find(ElementIdIsEqualToId(id)) || null;
}
function findIndexById(elements, id) {
    return elements.findIndex(ElementIdIsEqualToId(id));
}
function cleanCollection(collection) {
    collection.clean();
}
class Collection {
    /**
     * Creates a root collection
     * @example const collection = new Collection("id")
     * @returns Root collection
    */
    constructor(id = null, options = {}) {
        Object.defineProperty(this, "_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_collections", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_eventEmitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.defineProperty(this, "_Decorator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._options = options;
        this._Decorator = options.Decorator || Collection;
        this._parent = options.parent;
        this._root = options.root || this;
        this._eventEmitter = new events_1.default();
        this._id = id;
        this._collections = [];
        this._items = [];
        this._emitChange = this._emitChange.bind(this);
    }
    _findCollection(id = null) {
        return findById(this._collections, id);
    }
    _createCollection(id) {
        const collection = new this._Decorator(id, Object.assign(Object.assign({}, this._options), { parent: this, root: this._root }));
        collection.onChange(this._emitChange);
        this._collections.push(collection);
        return collection;
    }
    _findItem(id) {
        return findById(this._items, id);
    }
    _findElementIndex(id, elements) {
        return findIndexById(elements, id);
    }
    _createItem(id, value) {
        const item = {
            id,
            value,
        };
        this._items.push(item);
        return item;
    }
    _emitChange() {
        this._eventEmitter.emit(events_2.CHANGE_EVENT);
    }
    _setItem(id, value) {
        let item = this._findItem(id);
        if (item) {
            item.value = value;
        }
        else {
            item = this._createItem(id, value);
        }
        this._emitChange();
        return item;
    }
    _changeId(id) {
        this._id = id;
        this._emitChange();
    }
    _removeElement(id, elements) {
        const elementIndex = this._findElementIndex(id, elements);
        if (elementIndex > -1) {
            elements.splice(elementIndex, 1);
            this._emitChange();
        }
    }
    _removeCollection(id) {
        this._removeElement(id, this._collections);
    }
    _remove(id) {
        this._removeElement(id, this._items);
    }
    get _path() {
        if (this._parent) {
            return `${this._parent._path}:${this._id}`;
        }
        return this._id;
    }
    get _flat() {
        const items = this._items.map((item) => {
            return Object.assign(Object.assign({}, item), { collection: this._path });
        });
        const collections = this._collections.reduce((allItems, collection) => {
            const collectionItems = collection._flat.map((collectionFlatItem) => {
                return collectionFlatItem;
            });
            return [...allItems, ...collectionItems];
        }, []);
        return [...items, ...collections];
    }
    _merge(collection) {
        [...collection._items].forEach((item) => {
            this._setItem(item.id, item.value);
            collection._remove(item.id);
        });
        [...collection._collections].forEach((childCollection) => {
            const sameCollection = this._findCollection(childCollection.id);
            if (sameCollection) {
                sameCollection._merge(childCollection);
            }
            else {
                this._collections.push(childCollection);
                childCollection._parent = this;
                collection._removeCollection(childCollection.id);
                this._emitChange();
            }
        });
    }
    _cleanCollections() {
        this._collections.forEach(cleanCollection);
    }
    _cleanItems() {
        this._items = [];
        this._emitChange();
    }
    /**
     * @returns collection id
    */
    get id() {
        return this._id;
    }
    /**
     * Sets collection id. Do not use it for changing a child collection id. Use renameCollection instead
    */
    set id(id) {
        this._changeId(id);
    }
    /**
     * @returns collection id joined with parent collections ids
    */
    get path() {
        return this._path;
    }
    /**
     * Removes a collection
     * @example myCollection.removeCollection("id");
    */
    removeCollection(id) {
        this._removeCollection(id);
    }
    /**
     * Returns child collection with provided id or creates a new one
     * @example myCollection.collection("id");
     * @returns Child collection
    */
    collection(id) {
        return this._findCollection(id) || this._createCollection(id);
    }
    /**
     * Merges current collection with the received one recursively
    */
    merge(collection) {
        this._merge(collection);
    }
    /**
     * Changes a collection id. Id id already exists in other collection, then it merges them
    */
    renameCollection(id, newId) {
        if (id !== newId) {
            const collection = this._findCollection(id);
            const newCollection = this._findCollection(newId);
            if (collection) {
                if (newCollection) {
                    newCollection._merge(collection);
                    this._removeCollection(id);
                }
                else {
                    collection._changeId(newId);
                }
            }
        }
    }
    /**
     * Clean items and items in children collections recursively
     * @example myCollection.clean();
    */
    clean() {
        this._cleanCollections();
        this._cleanItems();
    }
    /**
     * Sets the value for the collection item with the provided id or creates a new one
     * @example myCollection.set("id", "value");
     * @returns item
    */
    set(id, value) {
        return this._setItem(id, value);
    }
    /**
     * Returns the value of a collection item
     * @example myCollection.get("id");
     * @returns item value
    */
    get(id) {
        const item = this._findItem(id);
        if (!item) {
            return null;
        }
        return item === null || item === void 0 ? void 0 : item.value;
    }
    /**
     * Removes a collection item
     * @example myCollection.remove("id");
    */
    remove(id) {
        this._remove(id);
    }
    /**
     * Removes all collection items
     * @example myCollection.cleanItems();
    */
    cleanItems() {
        this._cleanItems();
    }
    /**
     * @returns collection items
    */
    get items() {
        return this._items;
    }
    /**
     * @returns collection items and children collection items in a flat array
    */
    get flat() {
        return this._flat;
    }
    /**
     * Executes the provided function whenever a change is made in items, children collections or their items
     * @returns function to remove event listener
    */
    onChange(listener) {
        return (0, events_2.addEventListener)(listener, events_2.CHANGE_EVENT, this._eventEmitter);
    }
    /**
     * @returns root collection
    */
    get root() {
        return this._root;
    }
}
exports.default = Collection;
