"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observableStore = exports.addEventListener = exports.CHANGE_EVENT = void 0;
exports.CHANGE_EVENT = "change";
function addEventListener(listener, eventName, eventEmitter) {
    const removeCallback = () => {
        eventEmitter.removeListener(eventName, listener);
    };
    eventEmitter.on(eventName, listener);
    return removeCallback;
}
exports.addEventListener = addEventListener;
function observableStore(eventEmitter, storeLimit) {
    const array = [];
    return new Proxy(array, {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        set: function (target, property, value) {
            target[property] = value;
            if (property === "length" && value <= storeLimit) {
                // when logs reach the limit, it first add, then remove it. So, do not emit until it has been removed to avoid event duplication
                eventEmitter.emit(exports.CHANGE_EVENT);
            }
            return true;
        }
    });
}
exports.observableStore = observableStore;
