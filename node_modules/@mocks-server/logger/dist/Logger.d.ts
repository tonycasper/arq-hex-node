import type { LogsStore, LevelSilly, LevelDebug, LevelVerbose, LevelInfo, LevelWarn, LevelError, Label, Level, Log, LoggerOptions, SetOptions, EventListener, ArrayTransportInstance } from "./types";
interface LoggerPrivateOptions {
    parent?: Logger;
    root?: Logger;
    globalStore?: LogsStore;
    globalStoreTransport?: ArrayTransportInstance;
}
declare const LEVEL_SILLY: LevelSilly;
declare const LEVEL_DEBUG: LevelDebug;
declare const LEVEL_VERBOSE: LevelVerbose;
declare const LEVEL_INFO: LevelInfo;
declare const LEVEL_WARN: LevelWarn;
declare const LEVEL_ERROR: LevelError;
export default class Logger {
    private _label;
    private _transports;
    private _container;
    private _logger;
    private _store;
    private _storeEmitter;
    private _globalStore;
    private _globalStoreEmitter;
    private _namespaces;
    private _parent;
    private _root;
    private _level;
    private _transportsPinnedLevels;
    private _pinnedLevel;
    private _globalStoreTransport;
    /**
     * Creates a root logger
     * @returns Returns a new Logger instance
    */
    constructor(label?: Label, { level, storeLimit, globalStoreLimit }?: LoggerOptions, { parent, root, globalStore, globalStoreTransport }?: LoggerPrivateOptions);
    private _setWinstonTransportLevel;
    private _setTransportLevel;
    private _setBaseLevel;
    private _setLevelFromParent;
    private _set;
    private _getNamespace;
    private _createNamespace;
    get store(): LogsStore;
    get globalStore(): LogsStore;
    get label(): Label;
    get level(): Level;
    [LEVEL_SILLY](log: Log): void;
    [LEVEL_DEBUG](log: Log): void;
    [LEVEL_VERBOSE](log: Log): void;
    [LEVEL_INFO](log: Log): void;
    [LEVEL_WARN](log: Log): void;
    [LEVEL_ERROR](log: Log): void;
    setLevel(level: Level, options: SetOptions): void;
    namespace(label: Label, options: LoggerOptions): Logger;
    cleanStore(): void;
    onChangeStore(listener: EventListener): () => void;
    onChangeGlobalStore(listener: EventListener): () => void;
    get root(): Logger;
}
export {};
