{
  "name": "@mocks-server/nested-collections",
  "version": "2.0.0",
  "description": "Nested collections manager",
  "keywords": [
    "namespace",
    "set",
    "collection",
    "namespaced",
    "items"
  ],
  "author": "Javier Brea",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/mocks-server/main.git",
    "directory": "packages/nested-collections"
  },
  "publishConfig": {
    "access": "public"
  },
  "files": [
    "dist"
  ],
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "engines": {
    "node": ">=14.x"
  },
  "scripts": {
    "build": "tsc",
    "test:unit": "jest"
  },
  "readme": "<p align=\"center\">\n  <a href=\"https://github.com/mocks-server/main/actions?query=workflow%3Abuild+branch%3Amaster\"><img src=\"https://github.com/mocks-server/main/workflows/build/badge.svg?branch=master\" alt=\"Build Status\"></a>\n  <a href=\"https://codecov.io/gh/mocks-server/main\"><img src=\"https://codecov.io/gh/mocks-server/main/branch/master/graph/badge.svg?token=2S8ZR55AJV\" alt=\"Coverage\"></a>\n  <a href=\"https://sonarcloud.io/project/overview?id=mocks-server_main_nested-collections\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=mocks-server_main_nested-collections&metric=alert_status\" alt=\"Quality Gate\"></a>\n  <a href=\"https://www.npmjs.com/package/@mocks-server/nested-collections\"><img src=\"https://img.shields.io/npm/dm/@mocks-server/nested-collections.svg\" alt=\"Downloads\"></a>\n  <a href=\"https://renovatebot.com\"><img src=\"https://img.shields.io/badge/renovate-enabled-brightgreen.svg\" alt=\"Renovate\"></a>\n  <a href=\"https://github.com/mocks-server/main/blob/master/packages/nested-collections/LICENSE\"><img src=\"https://img.shields.io/npm/l/@mocks-server/nested-collections.svg\" alt=\"License\"></a>\n</p>\n\n---\n\n# Nested collections\n\nA collections manager that allows to store items with an `id` and a `value`. Other descendant collections can be created recursively. Each collection has a method allowing to get items from all descendent collections in a flat way, adding a collection `id` to each one of them.\n\nIt also provides methods for merging the collections, removing items or collections, etc. Events are emitted whenever any descendant collection or item changes.\n\n## Usage\n\nA brief example:\n\n```js\nconst { NestedCollections } = require(\"@mocks-server/nested-collections\");\n\nconst alerts = new NestedCollections(\"alerts\");\nalerts.set(\"root\", \"This alert is stored in the root collection\");\n\nconst pluginsAlerts = alerts.collection(\"plugins\");\npluginsAlerts.set(\"foo-alert-id\", \"This alert is stored in the plugins collection\");\n\nconst pluginAlertsA = pluginsAlerts.collection(\"a\");\nconst pluginAlertsB = pluginsAlerts.collection(\"b\");\n\npluginAlertsA.set(\"foo-1\", \"Alert from plugin A\");\npluginAlertsB.set(\"foo-2\", \"Alert from plugin B\");\n\nconsole.log(alerts.collection(\"plugins\").collection(\"b\").get(\"foo-2\"));\n// Alert from plugin B\n\nconsole.log(alerts.flat);\n/*\n[\n  {\n    id: 'root',\n    value: 'This alert is stored in the root collection',\n    collection: 'alerts'\n  },\n  {\n    id: 'foo-alert-id',\n    value: 'This alert is stored in the plugins collection',\n    collection: 'alerts:plugins'\n  },\n  {\n    id: 'foo-1',\n    value: 'Alert from plugin A',\n    collection: 'alerts:plugins:a'\n  },\n  {\n    id: 'foo-2',\n    value: 'Alert from plugin B',\n    collection: 'alerts:plugins:b'\n  }\n]\n*/\n```\n\n## API\n\n### NestedCollections\n\n```js\nconst collection = new NestedCollections(\"id\");\n``` \n\n* __`NestedCollections(id, options)`__. Returns a `collection` instance.\n  * __`id`__ _(String)_: Id for the root collection\n  * __`options`__ _(Object)_:\n    * __`Decorator`__ - Custom constructor to be used when creating children collections. Useful to extend the `NestedCollections` class (read [\"extending NestedCollections\"](#extending-collection) for further info).\n\n### collection instance\n\n* __get `id`__: Returns the collection id. Used as setter, sets collection id. Do not use it for changing a child collection id. Use `renameCollection` instead.\n* __set `id`__: Sets collection id. Do not use it for changing a child collection id. Use `renameCollection` instead.\n* __get `path`__: Returns the collection id joined with all parent collections ids using `:` (`parentCollectionId:parentCollectionId:collectionId`).\n* __`removeCollection(collectionId)`__: Removes children collection, including all of its items and possible children collections.\n  * `collectionId` _(String)_: Id of the collection to be removed.\n* __`collection(collectionId)`__: Returns child collection with provided id or creates a new one if it does not exists.\n  * `collectionId` _(String)_: Id of the collection to be returned.\n* __`renameCollection(collectionId, newCollectionId)`__: Changes a collection id. Id id already exists in other collection, then it merges them.\n  * `collectionId` _(String)_: Id of the collection to be changed.\n  * `newCollectionId` _(String)_: New id for the collection\n* __`clean()`__: Clean items and items in children collections recursively.\n* __`set(id, value)`__: Sets the value for the collection item with the provided id or creates a new one if it does not exists.\n  * `id` _(String)_: Id of the item to set the value.\n  * `value` _(Any)_: Value to be stored in the item.\n* __`get(id)`__: Returns the value of the collection item having the provided id.\n  * `id` _(String)_: Id of the item to get the value.\n* __`remove(id)`__: Removes a collection item.\n  * `id` _(String)_: Id of the item to be removed.\n* __`cleanItems()`__: Removes all collection items.\n* __get `items`__: Returns all collection items as an array.\n* __get `flat`__: Returns all collection items and descendent collection items in a flat array. It adds a `collection` id to each item. For nested collections, the `id` is built with all parents ids and self id concated by `:`.\n* __`onChange(callback)`__: Allows to add a listener that will be executed whenever any descendant collection or item changes. __It returns a function that removes the listener once executed__.\n  * `callback(value)` _(Function)_: Callback to be executed.\n\n## Extending NestedCollections\n\nIn order to be able to decorate the `NestedCollections` methods easily, a `Decorator` option can be passed as second argument to it. When present, it will be used to create children collections, so you can extend the `NestedCollections` methods, while nested collections will be still created with your class. For example:\n\n```js\nclass Alerts extends NestedCollections {\n  constructor(id, options) {\n    // Nested collections will be created always using this class\n    super(id, { ...options, Decorator: Alerts });\n  }\n\n  // Set method now accepts three arguments, and it always stores an object\n  set(id, message, error) {\n    return super.set(id, { message, error });\n  }\n}\n```\n"
}