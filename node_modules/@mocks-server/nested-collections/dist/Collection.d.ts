import { EventListener } from "./events";
export type { EventListener } from "./events";
export declare type elementId = string | null;
export interface ElementBasics {
    id: elementId;
}
export declare type itemValue = any;
export interface CollectionOptions {
    Decorator?: any;
    parent?: Collection;
    root?: Collection;
    [x: string | number | symbol]: unknown;
}
export interface Item extends ElementBasics {
    value: itemValue;
}
export interface FlatItem extends Item {
    collection: elementId;
}
export declare type items = Item[];
export declare type flatItems = FlatItem[];
export declare type collections = Collection[];
export declare type element = Item | Collection;
export declare type elements = element[];
export interface IdComparer {
    (element: element): boolean;
}
export default class Collection implements ElementBasics {
    private _id;
    private _collections;
    private _items;
    private _eventEmitter;
    private _Decorator;
    private _options;
    private _parent?;
    private _root;
    /**
     * Creates a root collection
     * @example const collection = new Collection("id")
     * @returns Root collection
    */
    constructor(id?: elementId, options?: CollectionOptions);
    private _findCollection;
    private _createCollection;
    private _findItem;
    private _findElementIndex;
    private _createItem;
    private _emitChange;
    private _setItem;
    private _changeId;
    private _removeElement;
    private _removeCollection;
    private _remove;
    private get _path();
    private get _flat();
    private _merge;
    private _cleanCollections;
    private _cleanItems;
    /**
     * @returns collection id
    */
    get id(): elementId;
    /**
     * Sets collection id. Do not use it for changing a child collection id. Use renameCollection instead
    */
    set id(id: elementId);
    /**
     * @returns collection id joined with parent collections ids
    */
    get path(): elementId;
    /**
     * Removes a collection
     * @example myCollection.removeCollection("id");
    */
    removeCollection(id: elementId): void;
    /**
     * Returns child collection with provided id or creates a new one
     * @example myCollection.collection("id");
     * @returns Child collection
    */
    collection(id: elementId): Collection;
    /**
     * Merges current collection with the received one recursively
    */
    merge(collection: Collection): void;
    /**
     * Changes a collection id. Id id already exists in other collection, then it merges them
    */
    renameCollection(id: elementId, newId: elementId): void;
    /**
     * Clean items and items in children collections recursively
     * @example myCollection.clean();
    */
    clean(): void;
    /**
     * Sets the value for the collection item with the provided id or creates a new one
     * @example myCollection.set("id", "value");
     * @returns item
    */
    set(id: elementId, value: itemValue): Item;
    /**
     * Returns the value of a collection item
     * @example myCollection.get("id");
     * @returns item value
    */
    get(id: elementId): itemValue;
    /**
     * Removes a collection item
     * @example myCollection.remove("id");
    */
    remove(id: elementId): void;
    /**
     * Removes all collection items
     * @example myCollection.cleanItems();
    */
    cleanItems(): void;
    /**
     * @returns collection items
    */
    get items(): items;
    /**
     * @returns collection items and children collection items in a flat array
    */
    get flat(): flatItems;
    /**
     * Executes the provided function whenever a change is made in items, children collections or their items
     * @returns function to remove event listener
    */
    onChange(listener: EventListener): () => void;
    /**
     * @returns root collection
    */
    get root(): Collection;
}
